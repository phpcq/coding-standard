<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="PhpCodeQuality">
  <description>The coding standard of the PHP code quality project, based on the Generic, PSR2, Squiz, TYPO3 and Zend coding standards.</description>

  <!-- Exclude git -->
  <exclude-pattern>*/.git/*</exclude-pattern>

  <!-- Include the whole PSR-1+PSR-2 standard -->
  <rule ref="PSR2"/>

  <!-- Basic Coding Standard -->

  <!-- Ensure that there are no spaces around square brackets. -->
  <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

  <!-- Classes -->
  <rule ref="Generic.Classes.DuplicateClassName" />
  <rule ref="Squiz.Classes.ClassFileName" />
  <rule ref="Squiz.Classes.SelfMemberReference" />
  <rule ref="Squiz.Classes.ValidClassName.NotCamelCaps">
    <!-- already handled by phpmd. -->
    <severity>0</severity>
  </rule>

  <!-- CodeAnalysis -->
  <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
  <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
  <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
  <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
  <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
  <rule ref="Generic.CodeAnalysis.EmptyStatement" />
  <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCATCH">
    <!-- already handled by Squiz.Commenting.EmptyCatchComment.Missing. -->
    <severity>0</severity>
  </rule>
  <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCatch">
    <!-- already handled by Squiz.Commenting.EmptyCatchComment.Missing. -->
    <severity>0</severity>
  </rule>

  <!-- Commenting -->
  <rule ref="PhpCodeQuality.Commenting.BlockComment.FirstLineIndent">
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.BlockComment.LineIndent">
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.BlockComment.LastLineIndent">
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.BlockComment.NoCapital">
    <severity>0</severity>
  </rule>

  <rule ref="PhpCodeQuality.Commenting.FileComment" />
  <rule ref="PhpCodeQuality.Commenting.FileComment.MissingVersion">
    <!-- We do NOT want to enforce to annotate the php version as it will change too fast due to SemVer. -->
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.ClassComment" />
  <rule ref="PhpCodeQuality.Commenting.FunctionComment" />
  <rule ref="PhpCodeQuality.Commenting.FunctionComment.TypeHintMissing">
    <!-- We do NOT want to enforce type hints everywhere. -->
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.FunctionComment.ScalarTypeHintMissing">
    <!-- We do NOT want to enforce scalar type hints everywhere as we also support PHP <7.0. -->
    <severity>0</severity>
  </rule>
  <rule ref="PhpCodeQuality.Commenting.VariableComment" />
  <rule ref="PhpCodeQuality.Commenting.DocComment" />
  <rule ref="PhpCodeQuality.Commenting.DocComment.ParamGroup">
    <!-- We want to allow a line between parameters. -->
    <severity>0</severity>
  </rule>
  <rule ref="Generic.Commenting.Fixme" />
  <rule ref="Generic.Commenting.Todo" />
  <rule ref="Squiz.Commenting.DocCommentAlignment" />
  <rule ref="Squiz.Commenting.EmptyCatchComment" />
  <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
  <rule ref="Squiz.Commenting.PostStatementComment" />
  <rule ref="Squiz.Commenting.InlineComment" />
  <rule ref="Squiz.Commenting.InlineComment.DocBlock">
    <!-- Allow doc blocks due to /** @var Class $var */ -->
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Commenting.InlineComment.NotCapital">
    <!-- Allow inline comments to start with lower case letters. -->
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
    <!-- Allow inline comments to end with alternative characters. -->
    <severity>0</severity>
  </rule>

  <rule ref="../TYPO3SniffPool/Sniffs/Commenting/DoubleSlashCommentsInNewLineSniff.php" /><!-- candidate for removal (xtra) -->
  <rule ref="../TYPO3SniffPool/Sniffs/Commenting/SpaceAfterDoubleSlashSniff.php" />

  <!-- Control structures -->
  <rule ref="../TYPO3SniffPool/Sniffs/ControlStructures/ValidDefaultStatementsInSwitchesSniff.php" />

  <!-- Files -->
  <rule ref="PhpCodeQuality.Files.EncodingUtf8" />
  <rule ref="Generic.Files.EndFileNewline" />
  <rule ref="Generic.Files.OneClassPerFile" />
  <rule ref="Generic.Files.OneInterfacePerFile" />

  <!-- Formatting -->
  <rule ref="Generic.Formatting.MultipleStatementAlignment" />
  <rule ref="Generic.Formatting.SpaceAfterCast" />
  <rule ref="Squiz.Formatting.OperatorBracket" />

  <!-- Functions -->
  <rule ref="Generic.Functions.CallTimePassByReference" />
  <rule ref="Squiz.Functions.FunctionDuplicateArgument" />
  <rule ref="Squiz.Functions.GlobalFunction" />

  <!-- NamingConventions -->
  <rule ref="Generic.NamingConventions.ConstructorName" />
  <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
    <!-- We do NOT want to have a leading underscore for private fields. -->
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps">
    <!-- This sadly chokes on the variables "$_" used by T.Lins. -->
    <severity>0</severity>
  </rule>

  <!-- Operators -->
  <rule ref="Squiz.Operators.IncrementDecrementUsage" />
  <rule ref="Squiz.Operators.ValidLogicalOperators" />

  <!-- PHP -->
  <rule ref="Squiz.PHP.CommentedOutCode" />
  <rule ref="PhpCodeQuality.PHP.ForbiddenFunctions" />
  <rule ref="Generic.PHP.DeprecatedFunctions" />
  <rule ref="Generic.PHP.ForbiddenFunctions" />
  <rule ref="Generic.PHP.NoSilencedErrors" />
  <rule ref="Generic.PHP.SAPIUsage" />
  <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops" />
  <rule ref="Squiz.PHP.Eval">
    <exclude-pattern>*/test/*</exclude-pattern>
  </rule>
  <rule ref="Squiz.PHP.GlobalKeyword" />
  <rule ref="Squiz.PHP.LowercasePHPFunctions" />
  <rule ref="Squiz.PHP.NonExecutableCode" />

  <!-- Scope -->
  <rule ref="Squiz.Scope.MethodScope" />
  <rule ref="Squiz.Scope.MemberVarScope" />
  <rule ref="Squiz.Scope.StaticThisUsage" />

  <!-- Strings -->
  <rule ref="PhpCodeQuality.Strings.UnnecessaryStringConcat" />
  <rule ref="Squiz.Strings.DoubleQuoteUsage" /><!-- we could just silence the ContainsVar part here to allow echo "$foo"; -->
  <rule ref="Squiz.Strings.EchoedStrings" />

  <!-- Whitespace -->
  <rule ref="PhpCodeQuality.WhiteSpace.WhitespaceAfterAsterisk" />
  <rule ref="Squiz.WhiteSpace.CastSpacing" />
  <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
  <rule ref="Squiz.WhiteSpace.OperatorSpacing.SpacingBefore">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>

</ruleset>
